configfile: "config.yml"
import snkmk
RUNLIB2SAMP, SAMP2RUNLIB = snkmk.make_runlib2samp()
SAMPLESETS = snkmk.make_samplesets(config['sample_sets'])
CHROMOSOMES = snkmk.make_chroms(config["refs"])
shell.prefix = "set -euo pipefail; "

wildcard_constraints:
    run="[^/]+",
    lib="[^/]+",
    aligner="[^/]+",
    sample="[^/]+",
    ref="[^/]+",
    type="[^/]+",

subworkflow align:
    workdir: ".."
    snakefile: "align.rules"



rule angsd_step1_split:
    input:
        ref=lambda wc: config['refs'][wc.ref],
        bamfile=align("data/bamlists/{aligner}/{ref}/{sampleset}.bamlist"),
    output:
        arg="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.arg",
        hwe="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.hwe.gz",
        stat="data/angsd/step1/{aligner}/{ref}/{set}/split/{region}.snpStat.gz",
    log:
        "data/log/angsd/step1/{aligner}/{ref}/{set}/{region}.log"
    params:
        regionarg=lambda wc: "" if wc.region == "genomewide" else "-rf $T/regions",
        regions=lambda wc: " ".join(CHROMOSOMES[wc.ref][wc.region]),
        gl=config["angsd"].get("glmethod", 2),
        minind=config["angsd"].get("minind", 1),
        mindp=config["angsd"].get("mindepth", 1),
        maxdp=config["angsd"].get("maxdepth", 1000),
        snppval=config["angsd"].get("snppval", 1/1000),
        minq=config["angsd"].get("minq", 1),
        minmapq=config["angsd"].get("minmapq", 1),
        minmaf=config["angsd"].get("minmaf", 0.0),
    threads: 2
    shell:
        "T=$(mktemp -d); trap \"rm -rf $T\" EXIT &&"
        "echo {params.regions} | tr ' ' '\\n' > $T/regions && "
        "( angsd"
        "   -bam {input.bamfile}"
        "   {params.regionarg}"
        "   -P {threads}"
        "   -doCounts 1"
        "   -doMaf 1"
        "   -doMajorMinor 1"
        "   -doSNPStat 1"
        "   -baq 1"
        "   -anc {input.ref}"
        "   -ref {input.ref}"
        "   -out $(dirname {output.arg})/$(basename {output.arg} .arg)"
        "   -GL {params.gl}"
        "   -snp_pval {params.snppval}"
        "   -minMapQ {params.minmapq}"
        "   -minQ  {params.minq}"
        "   -minMaf  {params.minmaf}"
        "   -skipTriallelic 1"
        " ) >{log} 2>&1"

